{"version":3,"sources":["images/tictactoe-icon.png","images/minesweeper-icon.png","components/GridItem.jsx","pages/Home.jsx","pages/TicTacToe.jsx","pages/Minesweeper.jsx","App.js","reportWebVitals.js","index.js"],"names":["GridItem","props","Grid","item","xs","sm","className","to","link","src","icon","alt","Typography","variant","title","Home","container","spacing","ticTacToeIcon","minesweeperIcon","initialGame","TicTacToe","useState","game","setGame","gameState","setGameState","curPlayer","setCurPlayer","updateGame","row","col","val","newGame","useEffect","winner","i","checkWin","tie","j","checkTie","map","rowIdx","colIdx","onClick","clickCell","Button","type","color","WIDTH","HEIGHT","MINE","FLAG","REVEALED","getRandomInt","max","Math","floor","random","ceil","Minesweeper","boardData","setBoardData","boardState","setBoardState","flagsLeft","setFlagsLeft","revealedLeft","setRevealedLeft","gameReaction","setGameReaction","clickAction","setClickAction","updateBoardState","newVal","newBoard","getNeighbours","neighbours","push","reveal","revealed","forEach","coord","startNewGame","width","height","newData","newRow","Array","fill","resetBoardData","board","neighbouringMines","filter","length","generateNums","numMines","mines","generateMines","newState","resetBoardState","e","button","preventDefault","ToggleButtonGroup","value","exclusive","onChange","newAction","aria-label","ToggleButton","state","onContextMenu","App","exact","path","component","Link","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.168f6c88.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tictactoe-icon.df776d40.png\";","export default __webpack_public_path__ + \"static/media/minesweeper-icon.f525e4e1.png\";","import React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport \"./GridItem.css\";\n\nconst GridItem = (props) => {\n  return (\n    <Grid item xs={12} sm={4} className=\"gameCell\">\n      <div className=\"cellIcon\">\n        <Link to={props.link}>\n          <img className=\"gameIcon\" src={props.icon} alt={props.alt} />\n        </Link>\n      </div>\n      <div className=\"cellTitle\">\n        <Link className=\"gameTitle\" to={props.link}>\n          <Typography variant=\"h5\">{props.title}</Typography>\n        </Link>\n      </div>\n    </Grid>\n  );\n};\n\nexport default GridItem;\n","import React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport \"./Home.css\";\nimport ticTacToeIcon from \"../images/tictactoe-icon.png\";\nimport minesweeperIcon from \"../images/minesweeper-icon.png\";\nimport GridItem from \"../components/GridItem\";\n\nconst Home = () => {\n  return (\n    <div className=\"Home\">\n      <header>\n        <Typography variant=\"h2\">genie's internet playground</Typography>\n      </header>\n      <Grid container spacing={2} className=\"gamesContainer\">\n        <GridItem\n          icon={ticTacToeIcon}\n          alt=\"tic tac toe icon\"\n          link=\"/tictactoe\"\n          title=\"Tic Tac Toe\"\n        />\n        <GridItem\n          icon={minesweeperIcon}\n          alt=\"minesweeper icon\"\n          link=\"/minesweeper\"\n          title=\"Minesweeper\"\n        />\n      </Grid>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport \"./TicTacToe.css\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst SIZE = 3;\nconst initialGame = [\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n];\n\nconst TicTacToe = () => {\n  const [game, setGame] = useState(initialGame);\n  const [gameState, setGameState] = useState(\"ongoing\");\n  const [curPlayer, setCurPlayer] = useState(\"X\");\n\n  const updateGame = (row, col, val) => {\n    const newGame = [...game];\n    newGame[row][col] = val;\n    setGame(newGame);\n  };\n\n  const restartGame = () => {\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        updateGame(i, j, \"\");\n      }\n    }\n    setGameState(\"ongoing\");\n    setCurPlayer(\"X\");\n  };\n\n  const checkTie = () => {\n    let tie = true;\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (game[i][j] === \"\") {\n          tie = false;\n          break;\n        }\n      }\n      if (!tie) {\n        break;\n      }\n    }\n    return tie;\n  };\n\n  const checkWin = () => {\n    let winner = false;\n\n    for (let i = 0; i < SIZE; i++) {\n      if (\n        game[i][0] === game[i][1] &&\n        game[i][1] === game[i][2] &&\n        game[i][0] !== \"\"\n      ) {\n        winner = game[i][0];\n      }\n      if (\n        game[0][i] === game[1][i] &&\n        game[1][i] === game[2][i] &&\n        game[0][i] !== \"\"\n      ) {\n        winner = game[0][i];\n      }\n    }\n    if (\n      game[0][0] === game[1][1] &&\n      game[1][1] === game[2][2] &&\n      game[0][0] !== \"\"\n    ) {\n      winner = game[0][0];\n    }\n    if (\n      game[0][2] === game[1][1] &&\n      game[1][1] === game[2][0] &&\n      game[0][2] !== \"\"\n    ) {\n      winner = game[0][2];\n    }\n    return winner;\n  };\n\n  const clickCell = (row, col) => {\n    if (gameState === \"ongoing\" && game[row][col] === \"\") {\n      updateGame(row, col, curPlayer);\n      setCurPlayer(curPlayer === \"X\" ? \"O\" : \"X\");\n    }\n  };\n\n  useEffect(() => {\n    const winner = checkWin();\n    if (winner) {\n      setGameState(winner);\n    } else if (checkTie()) {\n      setGameState(\"tie\");\n    } else {\n      setGameState(\"ongoing\");\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [game]);\n\n  return (\n    <div className=\"TicTacToeApp\">\n      <div className=\"title\">\n        <Typography variant=\"h2\">tic tac toe</Typography>\n      </div>\n      <main>\n        <div className=\"ticTacGrid\">\n          {game.map((row, rowIdx) =>\n            row.map((val, colIdx) => (\n              <div\n                className={\n                  val === \"\" && gameState === \"ongoing\"\n                    ? \"activeCell\"\n                    : \"inactiveCell\"\n                }\n                key={`${rowIdx}-${colIdx}`}\n                onClick={() => clickCell(rowIdx, colIdx)}\n              >\n                <p className=\"cellText\">{val}</p>\n              </div>\n            ))\n          )}\n        </div>\n        <div className=\"ticTacDetails\">\n          {gameState === \"ongoing\" ? (\n            <Typography variant=\"h4\">{curPlayer}'s turn</Typography>\n          ) : gameState === \"tie\" ? (\n            <Typography variant=\"h4\">Tie!</Typography>\n          ) : (\n            <Typography variant=\"h4\">{gameState} won!</Typography>\n          )}\n        </div>\n        <div className=\"ticTacActions\">\n          <Button\n            type=\"button\"\n            className=\"restartBtn\"\n            onClick={restartGame}\n            variant={gameState === \"ongoing\" ? \"outlined\" : \"contained\"}\n            color=\"secondary\"\n          >\n            Restart\n          </Button>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default TicTacToe;\n","import React, { useEffect, useState } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./Minesweeper.css\";\n\nconst WIDTH = 16;\nconst HEIGHT = 20;\nconst NUMMINES = 30;\nconst MINE = \"X\";\nconst HIDDEN = \"-\";\nconst FLAG = \"F\";\nconst REVEALED = \"O\";\n\n/**\n * Returns random integer 0 <= n < max\n */\nconst getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.ceil(max));\n};\n\nfunction Minesweeper() {\n  // the board containing the locations of mines\n  const [boardData, setBoardData] = useState([]);\n  // the state containing revealed and flagged cells\n  const [boardState, setBoardState] = useState([]);\n  const [flagsLeft, setFlagsLeft] = useState(0);\n  const [revealedLeft, setRevealedLeft] = useState(0);\n  const [gameState, setGameState] = useState(\"ongoing\");\n  const [gameReaction, setGameReaction] = useState(\":)\");\n  const [clickAction, setClickAction] = useState(MINE);\n\n  const updateBoardState = (row, col, newVal) => {\n    const newBoard = [...boardState];\n    newBoard[row][col] = newVal;\n    setBoardState(newBoard);\n    return newBoard;\n  };\n\n  // adds mines to the current board state\n  const generateMines = (board, numMines) => {\n    if (numMines >= HEIGHT * WIDTH) {\n      return board;\n    }\n    let mines = 0;\n    while (mines < numMines) {\n      let row = getRandomInt(HEIGHT);\n      let col = getRandomInt(WIDTH);\n      if (board[row][col] !== MINE) {\n        board[row][col] = MINE;\n        mines++;\n      }\n    }\n    return board;\n  };\n\n  // get the indices of neighbouring cells\n  const getNeighbours = (row, col) => {\n    const neighbours = [];\n\n    // row above\n    if (row > 0) {\n      neighbours.push({ row: row - 1, col: col });\n      if (col > 0) {\n        neighbours.push({ row: row - 1, col: col - 1 });\n      }\n      if (col < WIDTH - 1) {\n        neighbours.push({ row: row - 1, col: col + 1 });\n      }\n    }\n    // row below\n    if (row < HEIGHT - 1) {\n      neighbours.push({ row: row + 1, col: col });\n      if (col > 0) {\n        neighbours.push({ row: row + 1, col: col - 1 });\n      }\n      if (col < WIDTH - 1) {\n        neighbours.push({ row: row + 1, col: col + 1 });\n      }\n    }\n    // either side\n    if (col > 0) {\n      neighbours.push({ row: row, col: col - 1 });\n    }\n    if (col < WIDTH - 1) {\n      neighbours.push({ row: row, col: col + 1 });\n    }\n\n    return neighbours;\n  };\n\n  // sets the numbers that get revealed after clicking\n  const generateNums = (board) => {\n    for (let row = 0; row < HEIGHT; row++) {\n      for (let col = 0; col < WIDTH; col++) {\n        if (board[row][col] === MINE) {\n          continue;\n        }\n\n        let neighbours = getNeighbours(row, col);\n        let neighbouringMines = neighbours.filter(\n          (coord) => board[coord.row][coord.col] === MINE\n        ).length;\n        board[row][col] = neighbouringMines;\n      }\n    }\n    return board;\n  };\n\n  const reveal = (revealed, row, col) => {\n    updateBoardState(row, col, REVEALED);\n    revealed += 1;\n\n    if (boardData[row][col] === 0) {\n      let neighbours = getNeighbours(row, col);\n      neighbours.forEach((coord) => {\n        if (boardState[coord.row][coord.col] !== REVEALED) {\n          revealed = reveal(revealed, coord.row, coord.col);\n        }\n      });\n    }\n    return revealed;\n  };\n\n  const resetBoardData = (width, height) => {\n    let newData = [];\n    for (let row = 0; row < height; row++) {\n      let newRow = new Array(width).fill(-1);\n      newData = [...newData, newRow];\n    }\n    setBoardData(newData);\n    return newData;\n  };\n\n  const resetBoardState = (width, height) => {\n    let newState = [];\n    for (let row = 0; row < height; row++) {\n      let newRow = new Array(width).fill(HIDDEN);\n      newState = [...newState, newRow];\n    }\n    setBoardState(newState);\n    return newState;\n  };\n\n  const startNewGame = (width, height) => {\n    let newBoard = resetBoardData(width, height);\n\n    newBoard = generateMines(newBoard, NUMMINES);\n    newBoard = generateNums(newBoard);\n\n    setBoardData(newBoard);\n\n    setRevealedLeft(WIDTH * HEIGHT - NUMMINES);\n    setFlagsLeft(NUMMINES);\n\n    resetBoardState(width, height);\n\n    setGameState(\"ongoing\");\n  };\n\n  const clickCell = (e, row, col) => {\n    if (e.button === 0 && gameState === \"ongoing\") {\n      // left click\n      e.preventDefault();\n      if (clickAction === MINE && boardState[row][col] !== FLAG) {\n        // reveal\n        const revealed = reveal(0, row, col);\n        if (boardData[row][col] === MINE) {\n          setGameState(\"lost\");\n        } else {\n          if (revealedLeft - revealed === 0) {\n            setGameState(\"won\");\n          } else {\n            setRevealedLeft(revealedLeft - revealed);\n          }\n        }\n      } else if (clickAction === FLAG) {\n        // flag\n        if (boardState[row][col] === FLAG) {\n          // toggle to no flag\n          updateBoardState(row, col, HIDDEN);\n          setFlagsLeft(flagsLeft + 1);\n        } else if (boardState[row][col] === HIDDEN && flagsLeft > 0) {\n          // toggle to flag\n          updateBoardState(row, col, FLAG);\n          setFlagsLeft(flagsLeft - 1);\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    startNewGame(WIDTH, HEIGHT);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (gameState === \"lost\") {\n      // reveal all mines\n      for (let row = 0; row < HEIGHT; row++) {\n        for (let col = 0; col < WIDTH; col++) {\n          if (boardData[row][col] === MINE) {\n            updateBoardState(row, col, REVEALED);\n          }\n        }\n      }\n      setGameReaction(\"X(\");\n    } else if (gameState === \"won\") {\n      // win graphic?\n      setGameReaction(\"8)\");\n    } else if (gameState === \"ongoing\") {\n      setGameReaction(\":)\");\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [gameState]);\n\n  return (\n    <div className=\"MinesweeperApp\">\n      <div className=\"title\">\n        <Typography variant=\"h2\">minesweeper</Typography>\n      </div>\n      <main>\n        <div className=\"minesweeper\">\n          <div className=\"gameDetails\">\n            <Typography variant=\"h5\">{flagsLeft} mines left</Typography>\n          </div>\n          <div className=\"toggleDiv\">\n            <ToggleButtonGroup\n              value={clickAction}\n              exclusive\n              onChange={(e, newAction) => {\n                setClickAction(newAction);\n              }}\n              aria-label=\"toggle click action\"\n            >\n              <ToggleButton value={MINE} aria-label=\"click to mine\">\n                X\n              </ToggleButton>\n              <ToggleButton value={FLAG} aria-label=\"click to flag\">\n                F\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </div>\n          <div className=\"board\">\n            {boardState.map((row, i) =>\n              row.map((state, j) =>\n                state === REVEALED ? (\n                  <div\n                    className={`revealedCell cell cell${boardData[i][j]}`}\n                    key={`${i}-${j}`}\n                  >\n                    <p>{boardData[i][j] === MINE ? \"X\" : boardData[i][j]}</p>\n                  </div>\n                ) : (\n                  <div\n                    className={\n                      state === FLAG ? \"cell flagCell\" : \"cell hiddenCell\"\n                    }\n                    onClick={(e) => clickCell(e, i, j)}\n                    onContextMenu={() => {\n                      return false;\n                    }}\n                    key={`${i}-${j}`}\n                  ></div>\n                )\n              )\n            )}\n          </div>\n          <div className=\"gameReactions\">\n            <Typography variant=\"h5\">{gameReaction}</Typography>\n          </div>\n          <div className=\"gameActions\">\n            <Button\n              variant={gameState === \"ongoing\" ? \"outlined\" : \"contained\"}\n              color=\"secondary\"\n              onClick={() => startNewGame(WIDTH, HEIGHT)}\n            >\n              Restart\n            </Button>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default Minesweeper;\n","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\nimport TicTacToe from \"./pages/TicTacToe\";\nimport Minesweeper from \"./pages/Minesweeper\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/tictactoe\">\n          <header>\n            <Button className=\"back\" component={Link} to=\"/\">\n              Back\n            </Button>\n          </header>\n          <TicTacToe />\n        </Route>\n        <Route exact path=\"/minesweeper\">\n          <header>\n            <Button className=\"back\" component={Link} to=\"/\">\n              Back\n            </Button>\n          </header>\n          <Minesweeper />\n        </Route>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}